// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                 @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String
  username        String              @unique
  password        String
  profileComplete Boolean             @default(false)
  profile         BusinessProfile?
  reviews         ReviewAndRating[]   @relation("UserReviews")
  services        Service[]
  favorites       Favorite[]
  bookings        Booking[]
}

model BusinessProfile {
  id           Int                @id @default(autoincrement())
  businessName String
  logo         Bytes? // Blob storage
  bio          String
  userId       Int                @unique
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id                Int               @id @default(autoincrement())
  serviceType       String
  serviceName       String
  description       String
  price             Float
  image             Bytes?
  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  reviewsAndRatings ReviewAndRating[] @relation("ServiceReviews")
  favoritedBy       Favorite[]
  availableTimes    AvailableTime[]
  bookings          Booking[]
}

model ReviewAndRating {
  id         Int       @id @default(autoincrement())
  userId     Int
  serviceId  Int
  rating     Int
  reviewText String?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserReviews")
  service    Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade, name: "ServiceReviews")
}

model Favorite {
  userId    Int
  serviceId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([userId, serviceId])
}

model AvailableTime {
  id        Int      @id @default(autoincrement())
  serviceId Int
  startTime DateTime
  endTime   DateTime
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  bookings  Booking[]
}

model Booking {
  id         Int      @id @default(autoincrement())
  userId     Int
  serviceId  Int
  timeId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  time       AvailableTime @relation(fields: [timeId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}
